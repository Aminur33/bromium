/*
 * generated by Xtext 2.12.0
 */
package com.hribol.bromium.dsl.serializer;

import com.google.inject.Inject;
import com.hribol.bromium.dsl.bromium.ApplicationAction;
import com.hribol.bromium.dsl.bromium.BromiumPackage;
import com.hribol.bromium.dsl.bromium.ClickOnElementWithId;
import com.hribol.bromium.dsl.bromium.ElementWithIdIsPresent;
import com.hribol.bromium.dsl.bromium.Model;
import com.hribol.bromium.dsl.bromium.PageLoad;
import com.hribol.bromium.dsl.bromium.ThreeDottedVersion;
import com.hribol.bromium.dsl.bromium.TypeTextInElementFoundByCssSelector;
import com.hribol.bromium.dsl.services.BromiumGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BromiumSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BromiumGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BromiumPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BromiumPackage.APPLICATION_ACTION:
				sequence_ApplicationAction(context, (ApplicationAction) semanticObject); 
				return; 
			case BromiumPackage.CLICK_ON_ELEMENT_WITH_ID:
				sequence_ClickOnElementWithId(context, (ClickOnElementWithId) semanticObject); 
				return; 
			case BromiumPackage.ELEMENT_WITH_ID_IS_PRESENT:
				sequence_ElementWithIdIsPresent(context, (ElementWithIdIsPresent) semanticObject); 
				return; 
			case BromiumPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BromiumPackage.PAGE_LOAD:
				sequence_PageLoad(context, (PageLoad) semanticObject); 
				return; 
			case BromiumPackage.THREE_DOTTED_VERSION:
				sequence_ThreeDottedVersion(context, (ThreeDottedVersion) semanticObject); 
				return; 
			case BromiumPackage.TYPE_TEXT_IN_ELEMENT_FOUND_BY_CSS_SELECTOR:
				sequence_TypeTextInElementFoundByCssSelector(context, (TypeTextInElementFoundByCssSelector) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ApplicationAction returns ApplicationAction
	 *
	 * Constraint:
	 *     (actionId=STRING precondition=WebDriverAction? webDriverAction=WebDriverAction postcondition=WebDriverAction?)
	 */
	protected void sequence_ApplicationAction(ISerializationContext context, ApplicationAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebDriverAction returns ClickOnElementWithId
	 *     ClickOnElementWithId returns ClickOnElementWithId
	 *
	 * Constraint:
	 *     cssSelector=STRING
	 */
	protected void sequence_ClickOnElementWithId(ISerializationContext context, ClickOnElementWithId semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BromiumPackage.Literals.CLICK_ON_ELEMENT_WITH_ID__CSS_SELECTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BromiumPackage.Literals.CLICK_ON_ELEMENT_WITH_ID__CSS_SELECTOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getClickOnElementWithIdAccess().getCssSelectorSTRINGTerminalRuleCall_6_0(), semanticObject.getCssSelector());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WebDriverAction returns ElementWithIdIsPresent
	 *     ElementWithIdIsPresent returns ElementWithIdIsPresent
	 *
	 * Constraint:
	 *     cssSelector=STRING
	 */
	protected void sequence_ElementWithIdIsPresent(ISerializationContext context, ElementWithIdIsPresent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BromiumPackage.Literals.ELEMENT_WITH_ID_IS_PRESENT__CSS_SELECTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BromiumPackage.Literals.ELEMENT_WITH_ID_IS_PRESENT__CSS_SELECTOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementWithIdIsPresentAccess().getCssSelectorSTRINGTerminalRuleCall_4_0(), semanticObject.getCssSelector());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=STRING version=Version baseVersion=Version? actions+=ApplicationAction*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebDriverAction returns PageLoad
	 *     PageLoad returns PageLoad
	 *
	 * Constraint:
	 *     subpath=STRING
	 */
	protected void sequence_PageLoad(ISerializationContext context, PageLoad semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BromiumPackage.Literals.PAGE_LOAD__SUBPATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BromiumPackage.Literals.PAGE_LOAD__SUBPATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPageLoadAccess().getSubpathSTRINGTerminalRuleCall_2_0(), semanticObject.getSubpath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ThreeDottedVersion returns ThreeDottedVersion
	 *
	 * Constraint:
	 *     (big=INT medium=INT small=INT)
	 */
	protected void sequence_ThreeDottedVersion(ISerializationContext context, ThreeDottedVersion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BromiumPackage.Literals.THREE_DOTTED_VERSION__BIG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BromiumPackage.Literals.THREE_DOTTED_VERSION__BIG));
			if (transientValues.isValueTransient(semanticObject, BromiumPackage.Literals.THREE_DOTTED_VERSION__MEDIUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BromiumPackage.Literals.THREE_DOTTED_VERSION__MEDIUM));
			if (transientValues.isValueTransient(semanticObject, BromiumPackage.Literals.THREE_DOTTED_VERSION__SMALL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BromiumPackage.Literals.THREE_DOTTED_VERSION__SMALL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getThreeDottedVersionAccess().getBigINTTerminalRuleCall_0_0(), semanticObject.getBig());
		feeder.accept(grammarAccess.getThreeDottedVersionAccess().getMediumINTTerminalRuleCall_2_0(), semanticObject.getMedium());
		feeder.accept(grammarAccess.getThreeDottedVersionAccess().getSmallINTTerminalRuleCall_4_0(), semanticObject.getSmall());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WebDriverAction returns TypeTextInElementFoundByCssSelector
	 *     TypeTextInElementFoundByCssSelector returns TypeTextInElementFoundByCssSelector
	 *
	 * Constraint:
	 *     (text=STRING cssSelector=STRING)
	 */
	protected void sequence_TypeTextInElementFoundByCssSelector(ISerializationContext context, TypeTextInElementFoundByCssSelector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BromiumPackage.Literals.TYPE_TEXT_IN_ELEMENT_FOUND_BY_CSS_SELECTOR__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BromiumPackage.Literals.TYPE_TEXT_IN_ELEMENT_FOUND_BY_CSS_SELECTOR__TEXT));
			if (transientValues.isValueTransient(semanticObject, BromiumPackage.Literals.TYPE_TEXT_IN_ELEMENT_FOUND_BY_CSS_SELECTOR__CSS_SELECTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BromiumPackage.Literals.TYPE_TEXT_IN_ELEMENT_FOUND_BY_CSS_SELECTOR__CSS_SELECTOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeTextInElementFoundByCssSelectorAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.accept(grammarAccess.getTypeTextInElementFoundByCssSelectorAccess().getCssSelectorSTRINGTerminalRuleCall_7_0(), semanticObject.getCssSelector());
		feeder.finish();
	}
	
	
}

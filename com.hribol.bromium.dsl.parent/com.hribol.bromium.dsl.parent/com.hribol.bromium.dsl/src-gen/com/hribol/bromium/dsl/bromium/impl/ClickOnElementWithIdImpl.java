/**
 * generated by Xtext 2.12.0
 */
package com.hribol.bromium.dsl.bromium.impl;

import com.hribol.bromium.dsl.bromium.BromiumPackage;
import com.hribol.bromium.dsl.bromium.ClickOnElementWithId;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Click On Element With Id</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.hribol.bromium.dsl.bromium.impl.ClickOnElementWithIdImpl#getCssSelector <em>Css Selector</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClickOnElementWithIdImpl extends WebDriverActionImpl implements ClickOnElementWithId
{
  /**
   * The default value of the '{@link #getCssSelector() <em>Css Selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCssSelector()
   * @generated
   * @ordered
   */
  protected static final String CSS_SELECTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCssSelector() <em>Css Selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCssSelector()
   * @generated
   * @ordered
   */
  protected String cssSelector = CSS_SELECTOR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClickOnElementWithIdImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BromiumPackage.Literals.CLICK_ON_ELEMENT_WITH_ID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCssSelector()
  {
    return cssSelector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCssSelector(String newCssSelector)
  {
    String oldCssSelector = cssSelector;
    cssSelector = newCssSelector;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BromiumPackage.CLICK_ON_ELEMENT_WITH_ID__CSS_SELECTOR, oldCssSelector, cssSelector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BromiumPackage.CLICK_ON_ELEMENT_WITH_ID__CSS_SELECTOR:
        return getCssSelector();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BromiumPackage.CLICK_ON_ELEMENT_WITH_ID__CSS_SELECTOR:
        setCssSelector((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BromiumPackage.CLICK_ON_ELEMENT_WITH_ID__CSS_SELECTOR:
        setCssSelector(CSS_SELECTOR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BromiumPackage.CLICK_ON_ELEMENT_WITH_ID__CSS_SELECTOR:
        return CSS_SELECTOR_EDEFAULT == null ? cssSelector != null : !CSS_SELECTOR_EDEFAULT.equals(cssSelector);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (cssSelector: ");
    result.append(cssSelector);
    result.append(')');
    return result.toString();
  }

} //ClickOnElementWithIdImpl

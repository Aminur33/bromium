/**
 * generated by Xtext 2.12.0
 */
package com.hribol.bromium.dsl.tests;

import com.google.inject.Inject;
import com.hribol.bromium.dsl.bromium.Model;
import com.hribol.bromium.dsl.tests.BromiumInjectorProvider;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(BromiumInjectorProvider.class)
@SuppressWarnings("all")
public class BromiumParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  private IResourceValidator validator;
  
  @Test
  public void scopingOfExposedParameters() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("name \'Example name\'");
      _builder.newLine();
      _builder.append("version \'8.2.5\'");
      _builder.newLine();
      _builder.append("actions {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id typeIntoUsernameField");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("syntax \'Type \' content \'into username field\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("type content in element with css selector \'#login\' ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("do not expect http request");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id clickOnLoginButton");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("syntax \'Click on login button\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("click on element with css selector content");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("do not expect http request");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      final List<Issue> issues = this.validator.validate(result.eResource(), CheckMode.ALL, CancelIndicator.NullImpl);
      Assert.assertFalse(issues.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("name \'Demo app\'");
      _builder.newLine();
      _builder.append("version \'0.1.0\'");
      _builder.newLine();
      _builder.append("actions {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id loadLoginPage");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("syntax \'Load login page\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("load page \'/login\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("do expect http request");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id typeUsername");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("syntax \'Type username\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("type \"admin\" in element with css selector \"#user\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("do not expect http request");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id typePassword");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("syntax \'Type password\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("type \"admin\" in element with css selector \"#pass\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("do not expect http request");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id clickLoginButton");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("syntax \'Click login button\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("click on element with css selector \"#login\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("do expect http request");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
